{
   "tooltip_icon_entity_inspector": "AI Inspector",
   "tooltip_icon_campaign_browser": "Campaign Browser",
   "tooltip_icon_item_dropper": "Item Stamper",
   "tooltip_icon_object_browser": "Object Browser",
   "tooltip_icon_perfmon": "Performance Monitor",
   "tooltip_icon_entity_editor": "Entity Editor",
   "tooltip_icon_job_monitor": "Job Monitor",
   "tooltip_icon_trace_monitor": "Trace Monitor",
   "entity_editor": {
      "destination": {
         "tooltip_region": "Shows as purple lines when you press F11. This is the region from which we generate the adjacency regions. It should fit all of your entity in a neat square.",
         "tooltip_region_min": "Front Left Corner (usually y=0)",
         "tooltip_region_max": "Back Right Corner with y set to height desired for walking up to it (usually y=1)",
         "tooltip_adjacency": "Shows as red lines when you press F11. This is where a hearthling where try to walk to when they walk up to the entity. Click on a square to set it as considered adjacent to the object or not.",
         "json_description": "Paste this as the destination and region_collision_shape (if applicable) component in the .json of your root entity. DO NOT put it in the ghost!"
      },
      "mob": {
         "tooltip_axis_alignment": "Whether this entity is force aligned to the X or Z axis. If enabled, the entity will usually snap to grid lines (visible when you press z)",
         "tooltip_model_origin": "The center of this model (with scale numbers applied) about which the mesh/actual voxels rotate. This will be 0,0,0 if you model is an even number of voxels. Be sure to center the model in the .qb file. If your model is an odd number of voxels, move larger half of the model into the upper right quadrant in Qubicle Constuctor, multiply 0.5 by the scale of the model to get the new origin. Ex: if scale = 0.1, then origin = -0.05, 0, 0.05",
         "tooltip_region_origin": "The center of the region of the model. This is the point about which the region for adjacency rotates.",
         "json_description": "Paste this as the mob component in the ghost.json of your item. Make sure the ghost is mixed into the root entity."
      }
   },
   "debugtools_mixintos": {
      "interrupt_ai": {
         "interrupt_command": {
            "display_name": "Interrupt",
            "description": "Send the ai back to stonehearth:top"
         }
      }
   }
}